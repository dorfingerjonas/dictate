{"version":3,"sources":["./src/environments/environment.ts","./src/app/speech-recognition.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/header/header.component.ts","./src/app/header/header.component.html","./src/app/button-bar/button-bar.component.ts","./src/app/button-bar/button-bar.component.html","./src/app/output/output.component.ts","./src/app/output/output.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import {EventEmitter, Injectable} from '@angular/core';\r\n\r\ndeclare let webkitSpeechRecognition: any;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SpeechRecognitionService {\r\n\r\n  public recoStarted = false;\r\n  public text = '';\r\n  public interimResult = new EventEmitter();\r\n  private recognition = new webkitSpeechRecognition();\r\n\r\n  constructor() {\r\n  }\r\n\r\n  // init speech reco\r\n  init(): void {\r\n    // enable live results\r\n    this.recognition.interimResults = true;\r\n    // set reco lang\r\n    this.recognition.lang = 'de-DE';\r\n\r\n    this.recognition.continuous = true;\r\n\r\n    // eventlistener for reco results\r\n    this.recognition.addEventListener('result', e => {\r\n      this.text = Array.from(e.results)\r\n        .map(result => result[0])\r\n        .map(result => result.transcript)\r\n        .join('');\r\n\r\n      this.interimResult.emit(this.text);\r\n    });\r\n  }\r\n\r\n  // start speech reco\r\n  start(): void {\r\n    console.log('%ccalled start reco function', 'color: red; font-weight: bold;');\r\n\r\n    if (!this.recoStarted) {\r\n      this.recognition.start();\r\n      this.recoStarted = true;\r\n    }\r\n  }\r\n\r\n  // stop speech reco\r\n  stop(): void {\r\n    this.recognition.stop();\r\n    this.recoStarted = false;\r\n  }\r\n}\r\n","import {Component, EventEmitter, OnInit} from '@angular/core';\r\nimport {SpeechRecognitionService} from './speech-recognition.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'dictate';\r\n  content = '';\r\n  isContinued = false;\r\n  oldValue = '';\r\n\r\n  constructor(public speechReco: SpeechRecognitionService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.speechReco.init();\r\n\r\n    this.speechReco.interimResult.subscribe(result => {\r\n      result = this.formatText(result);\r\n\r\n      if (this.isContinued) {\r\n        this.content = this.oldValue + result;\r\n      } else {\r\n        this.content = result;\r\n      }\r\n    });\r\n  }\r\n\r\n  isContinuedHandler(event: boolean): void {\r\n    this.isContinued = event;\r\n\r\n    if (event) {\r\n      this.oldValue = this.content + ' ';\r\n    }\r\n  }\r\n\r\n  reset(): void {\r\n    this.content = '';\r\n  }\r\n\r\n  formatText(text): string {\r\n    const placeholders = [\r\n      {regEx: 'Absatz', content: '\\n'},\r\n      {regEx: 'absatz', content: '\\n'}\r\n    ];\r\n\r\n    for (const placeholder of placeholders) {\r\n      while (text.includes(placeholder.regEx)) {\r\n        text = text.replace(placeholder.regEx, placeholder.content);\r\n      }\r\n    }\r\n\r\n    return text;\r\n  }\r\n}\r\n","<app-header></app-header>\r\n\r\n<app-output [content]=\"content\"></app-output>\r\n\r\n<app-button-bar [content]=\"content\" [speechRecoService]=\"speechReco\" (isContinued)=\"isContinuedHandler($event)\" (resetHandler)=\"reset()\"></app-button-bar>\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { OutputComponent } from './output/output.component';\r\nimport { ButtonBarComponent } from './button-bar/button-bar.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HeaderComponent,\r\n    OutputComponent,\r\n    ButtonBarComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<h1>Dictate - Convert your voice into text</h1>\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {SpeechRecognitionService} from '../speech-recognition.service';\r\n\r\n@Component({\r\n  selector: 'app-button-bar',\r\n  templateUrl: './button-bar.component.html',\r\n  styleUrls: ['./button-bar.component.scss']\r\n})\r\nexport class ButtonBarComponent implements OnInit {\r\n\r\n  @Input() content = '';\r\n  @Input() speechRecoService: SpeechRecognitionService;\r\n  @Output() isContinued = new EventEmitter<boolean>();\r\n  @Output() resetHandler = new EventEmitter();\r\n  recoOnceStarted = false;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  start(): void {\r\n    if (!this.speechRecoService.recoStarted) {\r\n      this.recoOnceStarted = true;\r\n      this.speechRecoService.start();\r\n    }\r\n  }\r\n\r\n  stop(): void {\r\n    this.speechRecoService.stop();\r\n  }\r\n\r\n  reset(): void {\r\n    this.recoOnceStarted = false;\r\n    this.speechRecoService.stop();\r\n    this.resetHandler.emit();\r\n    this.isContinued.emit(false);\r\n  }\r\n\r\n  continue(): void {\r\n    this.isContinued.emit(true);\r\n    this.speechRecoService.start();\r\n  }\r\n}\r\n","<button class=\"green\" (click)=\"start()\" [disabled]=\"this.recoOnceStarted\">Start Speech Recognition</button>\r\n\r\n<button class=\"green\" [disabled]=\"!speechRecoService.recoStarted && !recoOnceStarted\" (click)=\"continue()\">Continue Speech Recognition</button>\r\n\r\n<button class=\"red\" [disabled]=\"!speechRecoService.recoStarted\" (click)=\"stop()\">Stop Speech Recognition</button>\r\n\r\n<button class=\"green\" (click)=\"reset()\">Reset</button>\r\n\r\n<a class=\"green\" [href]=\"'mailto:?body=' + content\">Open Mail Program</a>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-output',\r\n  templateUrl: './output.component.html',\r\n  styleUrls: ['./output.component.scss']\r\n})\r\nexport class OutputComponent implements OnInit {\r\n\r\n  @Input() content = '';\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<textarea cols=\"30\" rows=\"10\" [value]=\"content\" [readOnly]=\"true\"></textarea>\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}